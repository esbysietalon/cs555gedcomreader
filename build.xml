<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="cs555">
    <property environment="env"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>
    <property name="report.dir" value="."/>
	<property name="test.classes.dir" value="."/>
	<path id="cs555.classpath">
        <pathelement location="."/>
		<pathelement location="junit4.10"/>
        <pathelement location="junit4.10/junit-4.10.jar"/>
        <pathelement location="junit4.10/junit-dep-4.10.jar"/>
        <pathelement location="junit4.10/hamcrest-core-1.3.jar"/>
        <pathelement location="junit4.10/junit-4.10-src.jar"/>
    </path>
    <target name="init">
        <copy includeemptydirs="false" todir=".">
            <fileset dir=".">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete>
            <fileset dir="." includes="**/*.class"/>
        </delete>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="." includeantruntime="false" source="${source}" target="${target}">
            <src path="."/>
            <classpath refid="cs555.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="Main (1)">
        <java classname="Main" failonerror="true" fork="yes">
            <arg line="Eli_GEDCOM.ged"/>
            <classpath refid="cs555.classpath"/>
        </java>
    </target>
    <target name="Test01">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="Test01" todir="${junit.output.dir}"/>
            <jvmarg line="-ea"/>
            <classpath refid="cs555.classpath"/>
        </junit>
    </target>
	<target name="junit">

		<junit printsummary="on" haltonfailure="no" showoutput="true">

			<!-- Project classpath, must include junit.jar -->
			<classpath refid="cs555.classpath" />
		
			<!-- test class -->
			<classpath location="${test.classes.dir}" />
		
			<test name="Test01" 
				haltonfailure="no" todir="${report.dir}" failureproperty="test.failure">
				<formatter type="plain" />
				<formatter type="xml" />
			</test>
			
			<test name="Test02" 
				haltonfailure="no" todir="${report.dir}" failureproperty="test.failure">
				<formatter type="plain" />
				<formatter type="xml" />
			</test>
		</junit>
		<fail message="One or more JUnit tests failed." if="test.failure"/>
	</target>
	<target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
